name: Build Next.js and Images

on:
  push:
    branches:
      - 'master'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'master'

jobs:
  build-next:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-package-manager
        run: |
            if [ -f "${{ github.workspace }}/yarn.lock" ]; then
              echo "manager=yarn" >> $GITHUB_OUTPUT
              echo "command=install" >> $GITHUB_OUTPUT
              echo "runner=yarn" >> $GITHUB_OUTPUT
              exit 0
            elif [ -f "${{ github.workspace }}/package.json" ]; then
              echo "manager=npm" >> $GITHUB_OUTPUT
              echo "command=ci" >> $GITHUB_OUTPUT
              echo "runner=npx --no-install" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "Unable to determine package manager"
              exit 1
            fi
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Restore cache
        uses: actions/cache@v3
        with:
            path: |
              .next/cache
            key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
            restore-keys: |
                ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Write .env file
        run: echo "${{ vars.ENV_FILE }}" > .env
      - name: Generate contentlayer
        run: ${{ steps.detect-package-manager.outputs.runner }} contentlayer build
      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./.next
          name: next_out
      - name: Upload static to cos
        uses: TencentCloud/cos-action@v1
        with:
          secret_id: ${{ secrets.TENCENT_CLOUD_SECRET_ID }}
          secret_key: ${{ secrets.TENCENT_CLOUD_SECRET_KEY }}
          cos_bucket: ${{ secrets.COS_BUCKET }}
          cos_region: ${{ secrets.COS_REGION }}
          local_path: .next/static
          remote_path: doc-solver/_next/static
          clean: false
      - name: Upload public to cos
        uses: TencentCloud/cos-action@v1
        with:
          secret_id: ${{ secrets.TENCENT_CLOUD_SECRET_ID }}
          secret_key: ${{ secrets.TENCENT_CLOUD_SECRET_KEY }}
          cos_bucket: ${{ secrets.COS_BUCKET }}
          cos_region: ${{ secrets.COS_REGION }}
          local_path: public
          remote_path: doc-solver/_next/public
          clean: false
  
  build-web-image:
    needs: build-next
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Regex matching
        uses: actions-ecosystem/action-regex-match@v2
        id: regex-match
        with:
          text: ${{ github.ref_name }}
          regex: 'v[0-9]+.[0-9]+.[0-9]+'

      - name: Exit if tag not matched
        if: ${{ steps.regex-match.outputs.match == '' }}
        run: |
          echo "Tag was not matched"
          exit 1

      - name: Download a Build Artifact
        uses: actions/download-artifact@v2
        with:
          name: next_out
          path: ./.next
      - name: Unzip Artifact
        run: tar xf ./.next/artifact.tar -C ./.next
      
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata for the Docker image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: hermesai/doc-solver-web

      - name: Build and push the Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: web
  
  build-worker-image:
    needs: build-next
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Regex matching
        uses: actions-ecosystem/action-regex-match@v2
        id: regex-match
        with:
          text: ${{ github.ref_name }}
          regex: 'v[0-9]+.[0-9]+.[0-9]+'

      - name: Exit if tag not matched
        if: ${{ steps.regex-match.outputs.match == '' }}
        run: |
          echo "Tag was not matched"
          exit 1
      
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata for the Docker image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: hermesai/doc-solver-worker

      - name: Build and push the Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: worker
